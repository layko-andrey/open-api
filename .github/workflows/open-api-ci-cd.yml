name: Open API CI/CD

on:
  push:
    branches:
      - '*'
  release:
    types: [published]

jobs:

  tests:
    name: Run tests
    runs-on: ubuntu-latest
    continue-on-error: false

    env:
      POSTGRES_HOST: localhost
      POSTGRES_PASSWORD: open-api
      POSTGRES_USER: open-api
      POSTGRES_DB: open-api
      GOOGLE_CLIENT_ID: secrets.GOOGLE_CLIENT_ID_DEV
      GOOGLE_CLIENT_SECRET: secrets.GOOGLE_CLIENT_SECRET_DEV
      NETWORK_URL: secrets.NETWORK_URL_DEV
      ETHEREUM_PRIVATE_KEY: secrets.ETHEREUM_PRIVATE_KEY_DEV
      OPEN_TOKEN_ADDRESS: secrets.OPEN_TOKEN_ADDRESS_DEV
      EVENT_SUBSCRIPTION: false
      STATE_API_URL: state-api-url

    services:

      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: open-api
          POSTGRES_USER: open-api
          POSTGRES_DB: open-api

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prepare Java SDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      #- name: Execute tests
       # run: ./gradlew check

      - name: Save test results
        uses: actions/upload-artifact@v2
        with:
          name: open_api_test_results_${{ github.sha }}
          path: build/reports/tests/test/**

      - name: Execute test coverage report
        run: ./gradlew jacocoTestReport

      - name: Save test coverage results
        uses: actions/upload-artifact@v2
        with:
          name: open_api_test_coverage_results_${{ github.sha }}
          path: build/reports/jacoco/test/html/**


  build:
    name: Build project
    runs-on: ubuntu-latest
    continue-on-error: false
    needs: [tests]
    if: github.event.action == 'published'

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Prepare Java SDK 8
        uses: actions/setup-java@v1
        with:
          java-version: 8

      - name: Build project
        run: ./gradlew assemble

      - name: Save executables
        uses: actions/upload-artifact@v2
        with:
          name: open_api_assembles_${{ github.sha }}
          path: build/libs/*.jar

  package:
    name: Packaging
    runs-on: ubuntu-latest
    continue-on-error: false
    needs: [tests, build]

    env:
      IMAGE_TAG: latest

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: open_api_assembles_${{ github.sha }}
          path: build/libs

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Define image tag
        run:
          if [[ ${{ github.ref }} == refs/heads/master ]]; then export IMAGE_TAG=latest; else export IMAGE_TAG=${{ github.ref }}#refs/heads/; fi;

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: openplatform/api:${{ env.IMAGE_TAG }}
          file: docker/Dockerfile


#  deploy-sprint:
#    name: Deploy Sprint
#    runs-on: ubuntu-latest
#    continue-on-error: false
#    needs: [tests, build, package]

#    steps:

#      - name: Checkout repository
#        uses: actions/checkout@v2

#      - name: Deploy server
#        run: |
#          sudo apt install openssh-client
#          sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          eval $(ssh-agent -s)
#          echo "${{ secrets.SPRINT_DEPLOY_SSH_KEY }}" | tr -d '\r' | ssh-add - > /dev/null
#          mkdir -p ~/.ssh
#          chmod 700 ~/.ssh
#          ssh-keyscan ${{ secrets.SPRINT_SERVER }} >> ~/.ssh/known_hosts
#          chmod 644 ~/.ssh/known_hosts


  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    continue-on-error: false
    needs: [tests, build, package]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy server
        run: |
          sudo apt install openssh-client
          sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          eval $(ssh-agent -s)
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_KEY_PROD }}" | tr -d '\r' | ssh-add - > ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.PROD_SERVER }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          ssh ${{ secrets.DEPLOY_USER_PROD }}@${{ secrets.DEPLOY_HOST_PROD }} "docker -help"







